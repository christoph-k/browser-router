{"version":3,"sources":["index.js"],"names":["BrowserRouter","root","document","getElementById","routes","currentPath","default","self","window","onhashchange","route","pattern","element","regex","RegExp","p","_path","innerHTML","match","appendChild","location","hash","length","substring","split"],"mappings":";AA0DK,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAxDQA,IAAAA,EAAAA,WAKGC,SAAAA,EAAAA,GAAM,EAAA,KAAA,GACTA,KAAAA,KAAOC,SAASC,eAAeF,GAC/BG,KAAAA,OAAS,GACTC,KAAAA,YAAc,GACdC,KAAAA,QAAU,KACTC,IAAAA,EAAO,KACbC,OAAOC,aAAe,WAClBF,EAAKG,SA4CZ,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WApCQC,MAAAA,SAAAA,EAASC,GACTR,KAAAA,OAAOO,GAAW,CACnBC,QAASA,EACTC,MAAO,IAAIC,OAAOH,MAiCzB,CAAA,IAAA,aA1BUC,MAAAA,SAAAA,GACFN,KAAAA,QAAUM,IAyBlB,CAAA,IAAA,QAtBO,MAAA,WACEG,IAAAA,EAAI,KAAKC,QACXD,GAAAA,IAAM,KAAKV,YAAXU,CAKC,IAAA,IAAML,KAFNT,KAAAA,KAAKgB,UAAY,GACjBZ,KAAAA,YAAcU,EACC,KAAKX,OACjBW,GAAAA,EAAEG,MAAM,KAAKd,OAAOM,GAAOG,OAE3B,YADKZ,KAAAA,KAAKkB,YAAY,KAAKf,OAAOM,GAAOE,SAI5CX,KAAAA,KAAKkB,YAAY,KAAKb,YAS9B,CAAA,IAAA,QANO,MAAA,WACAE,OAAAA,OAAOY,SAASC,KAAKC,OAAS,EACvB,IAEAd,OAAOY,SAASC,KAAKE,UAAU,GAAGC,MAAM,IAAK,GAAG,OAE9D,EAxDQxB,GAwDR,QAAA,cAAA","file":"browser-router.js","sourceRoot":"../src","sourcesContent":["/* global RegExp */\n\nexport class BrowserRouter {\n    /**\n     * @constructor\n     * @param {string} root - id of the root element\n     */\n    constructor(root) {\n        this.root = document.getElementById(root)\n        this.routes = {}\n        this.currentPath = \"\"\n        this.default = null\n        const self = this\n        window.onhashchange = () => {\n            self.route()\n        }\n    }\n\n    /**\n     * @param {string} pattern - pattern to match\n     * @param {object} element - html element to load\n     */\n    setRoute(pattern, element) {\n        this.routes[pattern] = {\n            element: element,\n            regex: new RegExp(pattern),\n        }\n    }\n\n    /**\n     * @param {object} element - html element to load\n     */\n    setDefault(element) {\n        this.default = element\n    }\n\n    route() {\n        const p = this._path()\n        if (p === this.currentPath) {\n            return\n        }\n        this.root.innerHTML = \"\"\n        this.currentPath = p\n        for (const route in this.routes) {\n            if (p.match(this.routes[route].regex)) {\n                this.root.appendChild(this.routes[route].element)\n                return\n            }\n        }\n        this.root.appendChild(this.default)\n    }\n\n    _path() {\n        if (window.location.hash.length < 2) {\n            return \"/\"\n        } else {\n            return window.location.hash.substring(1).split(\"?\", 2)[0]\n        }\n    }\n}\n"]}